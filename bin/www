#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('foodiy-11-03:server');
var http = require('http');
var Message=require('../models/message')
var moment = require('moment');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3002');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

//소켓통신 부분.
var io = require('socket.io')(server);
io.sockets.on('connection', function(socket) {

    socket.emit('connection', { type : 'connected' });
    socket.on('connection', function(data) {
        if(data.type === 'join')
        {
            socket.join(data.room);
            socket.room=data.room;
        }
    });
    socket.on('chat', function(data) {
        var content=data.content;
        var myname=data.myname;
        var connum=data.connum;
        var msg_to=data.msg_to;
        var newMessage=new Message;
        newMessage.content=content;
        newMessage.from=myname;
        newMessage.conver_id=connum;
        newMessage.to=msg_to;
        newMessage.checked=false;
        newMessage.time_created=moment().format();
        newMessage.save(function (err) {
            //res.send('clear');
        });
        var msg = {
            name: myname,
            content: content
        };
        socket.broadcast.to(socket.room).emit('message', msg);
    });

});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
